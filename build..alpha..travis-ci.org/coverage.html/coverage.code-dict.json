{"/home/travis/build/npmtest/node-npmtest-extract-text-webpack-plugin/test.js":"/* istanbul instrument in package npmtest_extract_text_webpack_plugin */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-extract-text-webpack-plugin/lib.npmtest_extract_text_webpack_plugin.js":"/* istanbul instrument in package npmtest_extract_text_webpack_plugin */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_extract_text_webpack_plugin = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_extract_text_webpack_plugin = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-extract-text-webpack-plugin/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-extract-text-webpack-plugin && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_extract_text_webpack_plugin */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_extract_text_webpack_plugin\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_extract_text_webpack_plugin.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_extract_text_webpack_plugin.rollup.js'] =\n            local.assetsDict['/assets.npmtest_extract_text_webpack_plugin.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_extract_text_webpack_plugin.__dirname +\n                    '/lib.npmtest_extract_text_webpack_plugin.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-extract-text-webpack-plugin/extract-text-webpack-plugin/index.js":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\nvar fs = require('fs');\nvar ConcatSource = require(\"webpack-sources\").ConcatSource;\nvar async = require(\"async\");\nvar ExtractedModule = require(\"./ExtractedModule\");\nvar Chunk = require(\"webpack/lib/Chunk\");\nvar OrderUndefinedError = require(\"./OrderUndefinedError\");\nvar loaderUtils = require(\"loader-utils\");\nvar schemaTester = require('./schema/validator');\nvar loaderSchema = require('./schema/loader-schema');\nvar pluginSchema = require('./schema/plugin-schema.json');\n\nvar NS = fs.realpathSync(__dirname);\n\nvar nextId = 0;\n\nfunction ExtractTextPluginCompilation() {\n\tthis.modulesByIdentifier = {};\n}\n\nExtractTextPlugin.prototype.mergeNonInitialChunks = function(chunk, intoChunk, checkedChunks) {\n\tif(!intoChunk) {\n\t\tcheckedChunks = [];\n\t\tchunk.chunks.forEach(function(c) {\n\t\t\tif(c.isInitial()) return;\n\t\t\tthis.mergeNonInitialChunks(c, chunk, checkedChunks);\n\t\t}, this);\n\t} else if(checkedChunks.indexOf(chunk) < 0) {\n\t\tcheckedChunks.push(chunk);\n\t\tchunk.modules.slice().forEach(function(module) {\n\t\t\tintoChunk.addModule(module);\n\t\t\tmodule.addChunk(intoChunk);\n\t\t});\n\t\tchunk.chunks.forEach(function(c) {\n\t\t\tif(c.isInitial()) return;\n\t\t\tthis.mergeNonInitialChunks(c, intoChunk, checkedChunks);\n\t\t}, this);\n\t}\n};\n\nExtractTextPluginCompilation.prototype.addModule = function(identifier, originalModule, source, additionalInformation, sourceMap, prevModules) {\n\tvar m;\n\tif(!this.modulesByIdentifier[identifier]) {\n\t\tm = this.modulesByIdentifier[identifier] = new ExtractedModule(identifier, originalModule, source, sourceMap, additionalInformation, prevModules);\n\t} else {\n\t\tm = this.modulesByIdentifier[identifier];\n\t\tm.addPrevModules(prevModules);\n\t\tif(originalModule.index2 < m.getOriginalModule().index2) {\n\t\t\tm.setOriginalModule(originalModule);\n\t\t}\n\t}\n\treturn m;\n};\n\nExtractTextPluginCompilation.prototype.addResultToChunk = function(identifier, result, originalModule, extractedChunk) {\n\tif(!Array.isArray(result)) {\n\t\tresult = [[identifier, result]];\n\t}\n\tvar counterMap = {};\n\tvar prevModules = [];\n\tresult.forEach(function(item) {\n\t\tvar c = counterMap[item[0]];\n\t\tvar module = this.addModule.call(this, item[0] + (c || \"\"), originalModule, item[1], item[2], item[3], prevModules.slice());\n\t\textractedChunk.addModule(module);\n\t\tmodule.addChunk(extractedChunk);\n\t\tcounterMap[item[0]] = (c || 0) + 1;\n\t\tprevModules.push(module);\n\t}, this);\n};\n\nExtractTextPlugin.prototype.renderExtractedChunk = function(chunk) {\n\tvar source = new ConcatSource();\n\tchunk.modules.forEach(function(module) {\n\t\tvar moduleSource = module.source();\n\t\tsource.add(this.applyAdditionalInformation(moduleSource, module.additionalInformation));\n\t}, this);\n\treturn source;\n};\n\nfunction isInvalidOrder(a, b) {\n\tvar bBeforeA = a.getPrevModules().indexOf(b) >= 0;\n\tvar aBeforeB = b.getPrevModules().indexOf(a) >= 0;\n\treturn aBeforeB && bBeforeA;\n}\n\nfunction getOrder(a, b) {\n\tvar aOrder = a.getOrder();\n\tvar bOrder = b.getOrder();\n\tif(aOrder < bOrder) return -1;\n\tif(aOrder > bOrder) return 1;\n\tvar aIndex = a.getOriginalModule().index2;\n\tvar bIndex = b.getOriginalModule().index2;\n\tif(aIndex < bIndex) return -1;\n\tif(aIndex > bIndex) return 1;\n\tvar bBeforeA = a.getPrevModules().indexOf(b) >= 0;\n\tvar aBeforeB = b.getPrevModules().indexOf(a) >= 0;\n\tif(aBeforeB && !bBeforeA) return -1;\n\tif(!aBeforeB && bBeforeA) return 1;\n\tvar ai = a.identifier();\n\tvar bi = b.identifier();\n\tif(ai < bi) return -1;\n\tif(ai > bi) return 1;\n\treturn 0;\n}\n\nfunction ExtractTextPlugin(options) {\n\tif(arguments.length > 1) {\n\t\tthrow new Error(\"Breaking change: ExtractTextPlugin now only takes a single argument. Either an options \" +\n\t\t\t\t\t\t\"object *or* the name of the result file.\\n\" +\n\t\t\t\t\t\t\"Example: if your old code looked like this:\\n\" +\n\t\t\t\t\t\t\"    new ExtractTextPlugin('css/[name].css', { disable: false, allChunks: true })\\n\\n\" +\n\t\t\t\t\t\t\"You would change it to:\\n\" +\n\t\t\t\t\t\t\"    new ExtractTextPlugin({ filename: 'css/[name].css', disable: false, allChunks: true })\\n\\n\" +\n\t\t\t\t\t\t\"The available options are:\\n\" +\n\t\t\t\t\t\t\"    filename: string\\n\" +\n\t\t\t\t\t\t\"    allChunks: boolean\\n\" +\n\t\t\t\t\t\t\"    disable: boolean\\n\");\n\t}\n\tif(isString(options)) {\n\t\toptions = { filename: options };\n\t} else {\n\t\tschemaTester(pluginSchema, options);\n\t}\n\tthis.filename = options.filename;\n\tthis.id = options.id != null ? options.id : ++nextId;\n\tthis.options = {};\n\tmergeOptions(this.options, options);\n\tdelete this.options.filename;\n\tdelete this.options.id;\n}\nmodule.exports = ExtractTextPlugin;\n\nfunction getLoaderObject(loader) {\n\tif (isString(loader)) {\n\t\treturn {loader: loader};\n\t}\n\treturn loader;\n}\n\nfunction mergeOptions(a, b) {\n\tif(!b) return a;\n\tObject.keys(b).forEach(function(key) {\n\t\ta[key] = b[key];\n\t});\n\treturn a;\n}\n\nfunction isString(a) {\n\treturn typeof a === \"string\";\n}\n\nfunction isFunction(a) {\n\treturn isType('Function', a);\n}\n\nfunction isType(type, obj) {\n\treturn Object.prototype.toString.call(obj) === '[object ' + type + ']';\n}\n\nExtractTextPlugin.loader = function(options) {\n\treturn { loader: require.resolve(\"./loader\"), options: options };\n};\n\nExtractTextPlugin.prototype.applyAdditionalInformation = function(source, info) {\n\tif(info) {\n\t\treturn new ConcatSource(\n\t\t\t\"@media \" + info[0] + \" {\",\n\t\t\tsource,\n\t\t\t\"}\"\n\t\t);\n\t}\n\treturn source;\n};\n\nExtractTextPlugin.prototype.loader = function(options) {\n\treturn ExtractTextPlugin.loader(mergeOptions({id: this.id}, options));\n};\n\nExtractTextPlugin.prototype.extract = function(options) {\n\tif(arguments.length > 1) {\n\t\tthrow new Error(\"Breaking change: extract now only takes a single argument. Either an options \" +\n\t\t\t\t\t\t\"object *or* the loader(s).\\n\" +\n\t\t\t\t\t\t\"Example: if your old code looked like this:\\n\" +\n\t\t\t\t\t\t\"    ExtractTextPlugin.extract('style-loader', 'css-loader')\\n\\n\" +\n\t\t\t\t\t\t\"You would change it to:\\n\" +\n\t\t\t\t\t\t\"    ExtractTextPlugin.extract({ fallback: 'style-loader', use: 'css-loader' })\\n\\n\" +\n\t\t\t\t\t\t\"The available options are:\\n\" +\n\t\t\t\t\t\t\"    use: string | object | loader[]\\n\" +\n\t\t\t\t\t\t\"    fallback: string | object | loader[]\\n\" +\n\t\t\t\t\t\t\"    publicPath: string\\n\");\n\t}\n\tif(options.fallbackLoader) {\n\t\tconsole.warn('fallbackLoader option has been deprecated - replace with \"fallback\"');\n\t}\n\tif(options.loader) {\n\t\tconsole.warn('loader option has been deprecated - replace with \"use\"');\n\t}\n\tif(Array.isArray(options) || isString(options) || typeof options.options === \"object\" || typeof options.query === 'object') {\n\t\toptions = { loader: options };\n\t} else {\n\t\tschemaTester(loaderSchema, options);\n\t}\n\tvar loader = options.use ||  options.loader;\n\tvar before = options.fallback || options.fallbackLoader || [];\n\tif(isString(loader)) {\n\t\tloader = loader.split(\"!\");\n\t}\n\tif(isString(before)) {\n\t\tbefore = before.split(\"!\");\n\t} else if(!Array.isArray(before)) {\n\t\tbefore = [before];\n\t}\n\toptions = mergeOptions({omit: before.length, remove: true}, options);\n\tdelete options.loader;\n\tdelete options.use;\n\tdelete options.fallback;\n\tdelete options.fallbackLoader;\n\treturn [this.loader(options)]\n\t\t.concat(before, loader)\n\t\t.map(getLoaderObject);\n}\n\nExtractTextPlugin.extract = ExtractTextPlugin.prototype.extract.bind(ExtractTextPlugin);\n\nExtractTextPlugin.prototype.apply = function(compiler) {\n\tvar options = this.options;\n\tcompiler.plugin(\"this-compilation\", function(compilation) {\n\t\tvar extractCompilation = new ExtractTextPluginCompilation();\n\t\tcompilation.plugin(\"normal-module-loader\", function(loaderContext, module) {\n\t\t\tloaderContext[NS] = function(content, opt) {\n\t\t\t\tif(options.disable)\n\t\t\t\t\treturn false;\n\t\t\t\tif(!Array.isArray(content) && content != null)\n\t\t\t\t\tthrow new Error(\"Exported value was not extracted as an array: \" + JSON.stringify(content));\n\t\t\t\tmodule[NS] = {\n\t\t\t\t\tcontent: content,\n\t\t\t\t\toptions: opt || {}\n\t\t\t\t};\n\t\t\t\treturn options.allChunks || module[NS + \"/extract\"]; // eslint-disable-line no-path-concat\n\t\t\t};\n\t\t});\n\t\tvar filename = this.filename;\n\t\tvar id = this.id;\n\t\tvar extractedChunks, entryChunks, initialChunks;\n\t\tcompilation.plugin(\"optimize-tree\", function(chunks, modules, callback) {\n\t\t\textractedChunks = chunks.map(function() {\n\t\t\t\treturn new Chunk();\n\t\t\t});\n\t\t\tchunks.forEach(function(chunk, i) {\n\t\t\t\tvar extractedChunk = extractedChunks[i];\n\t\t\t\textractedChunk.index = i;\n\t\t\t\textractedChunk.originalChunk = chunk;\n\t\t\t\textractedChunk.name = chunk.name;\n\t\t\t\textractedChunk.entrypoints = chunk.entrypoints;\n\t\t\t\tchunk.chunks.forEach(function(c) {\n\t\t\t\t\textractedChunk.addChunk(extractedChunks[chunks.indexOf(c)]);\n\t\t\t\t});\n\t\t\t\tchunk.parents.forEach(function(c) {\n\t\t\t\t\textractedChunk.addParent(extractedChunks[chunks.indexOf(c)]);\n\t\t\t\t});\n\t\t\t});\n\t\t\tasync.forEach(chunks, function(chunk, callback) {\n\t\t\t\tvar extractedChunk = extractedChunks[chunks.indexOf(chunk)];\n\t\t\t\tvar shouldExtract = !!(options.allChunks || chunk.isInitial());\n\t\t\t\tasync.forEach(chunk.modules.slice(), function(module, callback) {\n\t\t\t\t\tvar meta = module[NS];\n\t\t\t\t\tif(meta && (!meta.options.id || meta.options.id === id)) {\n\t\t\t\t\t\tvar wasExtracted = Array.isArray(meta.content);\n\t\t\t\t\t\tif(shouldExtract !== wasExtracted) {\n\t\t\t\t\t\t\tmodule[NS + \"/extract\"] = shouldExtract; // eslint-disable-line no-path-concat\n\t\t\t\t\t\t\tcompilation.rebuildModule(module, function(err) {\n\t\t\t\t\t\t\t\tif(err) {\n\t\t\t\t\t\t\t\t\tcompilation.errors.push(err);\n\t\t\t\t\t\t\t\t\treturn callback();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tmeta = module[NS];\n\t\t\t\t\t\t\t\tif(!Array.isArray(meta.content)) {\n\t\t\t\t\t\t\t\t\terr = new Error(module.identifier() + \" doesn't export content\");\n\t\t\t\t\t\t\t\t\tcompilation.errors.push(err);\n\t\t\t\t\t\t\t\t\treturn callback();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif(meta.content)\n\t\t\t\t\t\t\t\t\textractCompilation.addResultToChunk(module.identifier(), meta.content, module, extractedChunk);\n\t\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif(meta.content)\n\t\t\t\t\t\t\t\textractCompilation.addResultToChunk(module.identifier(), meta.content, module, extractedChunk);\n\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else callback();\n\t\t\t\t}, function(err) {\n\t\t\t\t\tif(err) return callback(err);\n\t\t\t\t\tcallback();\n\t\t\t\t});\n\t\t\t}, function(err) {\n\t\t\t\tif(err) return callback(err);\n\t\t\t\textractedChunks.forEach(function(extractedChunk) {\n\t\t\t\t\tif(extractedChunk.isInitial())\n\t\t\t\t\t\tthis.mergeNonInitialChunks(extractedChunk);\n\t\t\t\t}, this);\n\t\t\t\textractedChunks.forEach(function(extractedChunk) {\n\t\t\t\t\tif(!extractedChunk.isInitial()) {\n\t\t\t\t\t\textractedChunk.modules.slice().forEach(function(module) {\n\t\t\t\t\t\t\textractedChunk.removeModule(module);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tcompilation.applyPlugins(\"optimize-extracted-chunks\", extractedChunks);\n\t\t\t\tcallback();\n\t\t\t}.bind(this));\n\t\t}.bind(this));\n\t\tcompilation.plugin(\"additional-assets\", function(callback) {\n\t\t\textractedChunks.forEach(function(extractedChunk) {\n\t\t\t\tif(extractedChunk.modules.length) {\n\t\t\t\t\textractedChunk.modules.sort(function(a, b) {\n\t\t\t\t\t\tif(!options.ignoreOrder && isInvalidOrder(a, b)) {\n\t\t\t\t\t\t\tcompilation.errors.push(new OrderUndefinedError(a.getOriginalModule()));\n\t\t\t\t\t\t\tcompilation.errors.push(new OrderUndefinedError(b.getOriginalModule()));\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn getOrder(a, b);\n\t\t\t\t\t});\n\t\t\t\t\tvar chunk = extractedChunk.originalChunk;\n\t\t\t\t\tvar source = this.renderExtractedChunk(extractedChunk);\n\n\t\t\t\t\tvar getPath = (format) => compilation.getPath(format, {\n\t\t\t\t\t\tchunk: chunk\n\t\t\t\t\t}).replace(/\\[(?:(\\w+):)?contenthash(?::([a-z]+\\d*))?(?::(\\d+))?\\]/ig, function() {\n\t\t\t\t\t\treturn loaderUtils.getHashDigest(source.source(), arguments[1], arguments[2], parseInt(arguments[3], 10));\n\t\t\t\t\t});\n\n\t\t\t\t\tvar file = (isFunction(filename)) ? filename(getPath) : getPath(filename);\n\t\t\t\t\t\n\t\t\t\t\tcompilation.assets[file] = source;\n\t\t\t\t\tchunk.files.push(file);\n\t\t\t\t}\n\t\t\t}, this);\n\t\t\tcallback();\n\t\t}.bind(this));\n\t}.bind(this));\n};\n","/home/travis/build/npmtest/node-npmtest-extract-text-webpack-plugin/extract-text-webpack-plugin/ExtractedModule.js":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\nvar SourceMapSource = require(\"webpack-sources\").SourceMapSource;\nvar RawSource = require(\"webpack-sources\").RawSource;\n\nfunction ExtractedModule(identifier, originalModule, source, sourceMap, addtitionalInformation, prevModules) {\n\tthis._identifier = identifier;\n\tthis._originalModule = originalModule;\n\tthis._source = source;\n\tthis._sourceMap = sourceMap;\n\tthis._prevModules = prevModules;\n\tthis.addtitionalInformation = addtitionalInformation;\n\tthis.chunks = [];\n}\nmodule.exports = ExtractedModule;\n\nExtractedModule.prototype.getOrder = function() {\n\t// http://stackoverflow.com/a/14676665/1458162\n\treturn /^@import url/.test(this._source) ? 0 : 1;\n};\n\nExtractedModule.prototype.addChunk = function(chunk) {\n\tvar idx = this.chunks.indexOf(chunk);\n\tif(idx < 0)\n\t\tthis.chunks.push(chunk);\n};\n\nExtractedModule.prototype.removeChunk = function(chunk) {\n\tvar idx = this.chunks.indexOf(chunk);\n\tif(idx >= 0) {\n\t\tthis.chunks.splice(idx, 1);\n\t\tchunk.removeModule(this);\n\t\treturn true;\n\t}\n\treturn false;\n};\n\nExtractedModule.prototype.rewriteChunkInReasons = function(oldChunk, newChunks) { };\n\nExtractedModule.prototype.identifier = function() {\n\treturn this._identifier;\n};\n\nExtractedModule.prototype.source = function() {\n\tif(this._sourceMap)\n\t\treturn new SourceMapSource(this._source, null, this._sourceMap);\n\telse\n\t\treturn new RawSource(this._source);\n};\n\nExtractedModule.prototype.getOriginalModule = function() {\n\treturn this._originalModule;\n};\n\nExtractedModule.prototype.getPrevModules = function() {\n\treturn this._prevModules;\n};\n\nExtractedModule.prototype.addPrevModules = function(prevModules) {\n\tprevModules.forEach(function(m) {\n\t\tif(this._prevModules.indexOf(m) < 0)\n\t\t\tthis._prevModules.push(m);\n\t}, this);\n};\n\nExtractedModule.prototype.setOriginalModule = function(originalModule) {\n\tthis._originalModule = originalModule;\n};\n","/home/travis/build/npmtest/node-npmtest-extract-text-webpack-plugin/extract-text-webpack-plugin/OrderUndefinedError.js":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\nfunction OrderUndefinedError(module) {\n\tError.call(this);\n\tError.captureStackTrace(this, OrderUndefinedError);\n\tthis.name = \"OrderUndefinedError\";\n\tthis.message = \"Order in extracted chunk undefined\";\n\tthis.module = module;\n}\nmodule.exports = OrderUndefinedError;\n\nOrderUndefinedError.prototype = Object.create(Error.prototype);\n","/home/travis/build/npmtest/node-npmtest-extract-text-webpack-plugin/extract-text-webpack-plugin/schema/validator.js":"var Ajv = require('ajv');\nvar ajv = new Ajv({allErrors: true});\n\nmodule.exports = function validate(schema, data) {\n\tvar ajv = new Ajv({\n\t\terrorDataPath: 'property'\n\t});\n\tvar isValid = ajv.validate(schema, data);\n\n\tif(!isValid) {\n\t\tthrow new Error(ajv.errorsText());\n\t}\n}\n","/home/travis/build/npmtest/node-npmtest-extract-text-webpack-plugin/extract-text-webpack-plugin/schema/loader-schema.js":"module.exports = {\n\t\"$schema\": \"http://json-schema.org/draft-04/schema#\",\n\t\"type\": \"object\",\n\t\"additionalProperties\": false,\n\t\"properties\": {\n\t\t\"allChunks\": { \"type\": \"boolean\"},\n\t\t\"disable\": { \"type\": \"boolean\" },\n\t\t\"omit\": { \"type\": \"boolean\" },\n\t\t\"remove\": { \"type\": \"boolean\" },\n\t\t\"fallback\": { \"type\": [\"string\", \"array\", \"object\"] },\n\t\t\"filename\": { \"type\": \"string\" },\n\t\t\"use\": { \"type\": [\"string\", \"array\", \"object\"] },\n\t\t\"publicPath\": { \"type\": \"string\" },\n\n\t\t// deprecated\n\t\t\"fallbackLoader\": { \"type\": [\"string\", \"array\", \"object\"] },\n\t\t\"loader\": { \"type\": [\"string\", \"array\", \"object\"] }\n\t}\n};\n"}